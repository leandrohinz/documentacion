git checkout
git add .
git commit -m "mensaje"
git push
git reset
git reset --soft HEAD^
git reset --soft HEAD~1

Useful Commands
Starting
Command	Description
git config --global user.name {username}	Set globally User Name
git config --global user.email {useremail}	Set globally User Email
git config --global --list	Get global config
git init	Initialize a local Git repository
git clone {url}	Create a local copy of a remote repository
Basic Usage
Command	Description
git status	Check status of files
git add [file-name.txt]	Add a file to the staging area
git add -A	Add all new and changed files to the staging area
git commit -m "[commit message]"	Commit changes
git rm -r [file-name.txt]	Remove a file (or folder)
git reset file-name.txt]	This command unstages the file, but it preserves the file contents.
Branching & Merging
Command	Description
git branch	List branches (the asterisk denotes the current branch)
git branch -a	List all branches (local and remote)
git branch [branch name]	Create a new branch
git branch -d [branch name]	Delete a branch
git push origin --delete [branch name]	Delete a remote branch
git checkout -b [branch name]	Create a new branch and switch to it
git checkout -b [branch name] origin/[branch name]	Clone a remote branch and switch to it
git branch -m [old branch name] [new branch name]	Rename a local branch
git checkout [branch name]	Switch to a branch
git checkout -	Switch to the branch last checked out
git checkout -- [file-name.txt]	Discard changes to a file
git merge [branch name]	Merge a branch into the active branch
git merge [source branch] [target branch]	Merge a branch into a target branch
git stash	Stash changes in a dirty working directory
git stash clear	Remove all stashed entries
Sharing & Updating Projects
Command	Description
git push origin [branch name]	Push a branch to your remote repository
git push -u origin [branch name]	Push changes to remote repository (and remember the branch)
git push	Push changes to remote repository (remembered branch)
git push origin --delete [branch name]	Delete a remote branch
git pull	Update local repository to the newest commit
git pull origin [branch name]	Pull changes from remote repository
git remote add origin ssh://git@github.com/[username]/[repository-name].git	Add a remote repository
git remote set-url origin ssh://git@github.com/[username]/[repository-name].git	Set a repository's origin branch to SSH
Inspection & Comparison
Command	Description
git log	View changes
git log --summary	View changes (detailed)
git log --oneline	View changes (briefly)
git diff [source branch] [target branch]	Preview changes before merging

Sure, here are the steps to merge a develop branch into the master branch in Git:

First, switch to the master branch:
git checkout master

Then, merge the develop branch into the master branch:
git merge develop

If there are any merge conflicts, you’ll need to resolve them. Once you’ve resolved all conflicts, you can commit the merge:
git commit -m "Merged develop into master"

Finally, push your changes to the remote repository:
git push origin master

Please note that it’s a good practice to ensure that your local master branch is up-to-date with the remote master branch before performing the merge. You can do this by pulling the latest changes from the remote master branch before the merge:

git pull origin master

¡Guía de cómo deshacer el último commit con git!

Si no has hecho push:

• Para conservar cambios: git reset –soft HEAD~1
• Para descartar cambios: git reset –hard HEAD~1

• Para modificar el commit (mensaje o agregar cambios):
git commit –amend -m “Nuevo mensaje”

Si ya has hecho push:

• git revert para crear un nuevo commit que deshace los cambios. Si hay conflictos, prepárate para resolverlos.

• git log para obtener el hash del commit que deseas revertir.

Más avanzado:

• git rebase -i para modificar tu historial de commits localmente. Puedes reorganizar, combinar, editar o eliminar commits.

• Luego ejecuta git push –force-with-lease

• Precaución: Sólo usa rebase y push forzado en ramas donde seas el único colaborador o en situaciones donde todos los colaboradores estén informados y de acuerdo con reescribir la historia.

Te explico los comandos y parámetros:

git reset: Este comando se utiliza para restablecer el índice y el directorio de trabajo al estado de un commit específico.

–soft: Indica que el reset no debe modificar el índice (staging area) ni el directorio de trabajo, pero sí mueve el HEAD al commit especificado. Los cambios que estaban en el commit revertido se quedan en staging, listos para ser recommitidos si se desea.

–hard: Indica que el reset debe ajustar el índice (staging area) y el directorio de trabajo para reflejar el estado del commit especificado. Cualquier cambio en el directorio de trabajo desde el último commit se perderá.

HEAD~1: Se refiere al commit anterior al último. HEAD es un puntero al último commit de la rama actual, y ~1 mueve ese puntero un commit hacia atrás.

–force-with-lease: Una opción más segura que –force, ya que solo forzará el push si tu copia local está actualizada respecto a los cambios en el remoto. Evita sobrescribir el trabajo de otras personas accidentalmente.
